你问得非常到位！我们拆成几个重点逐一解答：

🔥 一、Swagger UI (FastAPI 自带)

你说的没错，FastAPI 默认会自动生成 Swagger 文档，只要访问：

http://<your-server>:<port>/docs

你可以：
	•	自动看到所有接口
	•	可以自己丰富 请求示例（Example Value），让 Swagger 界面更易用

✅ 如何在 FastAPI 里添加 Example Value

举个例子：

from pydantic import BaseModel, Field

class CopyRequest(BaseModel):
    source_type: str = Field(..., example="s3")
    source_bucket: str = Field(..., example="my-source-bucket")
    source_object: str = Field(..., example="my-folder/myfile.txt")
    destination_type: str = Field(..., example="minio")
    destination_bucket: str = Field(..., example="my-destination-bucket")
    destination_object: str = Field(..., example="my-folder/myfile.txt")

这样你访问 /docs 时，Swagger 会自动显示 example。

🔥 二、你提到的需求总结

需求	说明
丰富 Swagger Example	用 Field(..., example=...)
增加 list API	提供列出 Bucket 和目录内容的接口
支持整个 Folder copy	递归列出文件后，自己循环 copy（SDK 没有现成支持整个目录 copy 的 API）

✅ 三、关于递归 copy 的重点

👉 boto3 和 minio SDK 都 没有现成的 “copy folder” 方法

它们的 API 只能操作 object（单个文件）

	所以：

	•	你需要自己递归列出所有对象（boto3 支持分页查询，Minio SDK 也支持遍历）
	•	然后逐个下载、上传，相当于你自己实现批量拷贝逻辑

✅ 四、设计优化后的接口

📦 支持接口：
	•	POST /copy
支持单个文件和整个文件夹递归复制
	•	GET /list
支持列出 Bucket、列出路径下的对象（可以加 prefix 参数）

✅ 五、完整优化版设计

我帮你设计如下：

1. List Buckets & List Objects

@app.get("/list")
async def list_objects(storage_type: str, bucket: str = None, prefix: str = ""):
    """
    storage_type: 's3' or 'minio'
    bucket: Optional. If not provided, list all buckets.
    prefix: Optional. If provided, list objects under this prefix.
    """
    try:
        if storage_type == "s3":
            if not bucket:
                # List all S3 buckets
                response = s3_client.list_buckets()
                buckets = [b['Name'] for b in response['Buckets']]
                return {"buckets": buckets}

            # List S3 objects
            objects = []
            paginator = s3_client.get_paginator('list_objects_v2')
            for page in paginator.paginate(Bucket=bucket, Prefix=prefix):
                for obj in page.get('Contents', []):
                    objects.append(obj['Key'])
            return {"objects": objects}

        elif storage_type == "minio":
            if not bucket:
                buckets = [b.name for b in minio_client.list_buckets()]
                return {"buckets": buckets}

            # List MinIO objects
            objects = []
            for obj in minio_client.list_objects(bucket, prefix=prefix, recursive=True):
                objects.append(obj.object_name)
            return {"objects": objects}

        else:
            raise ValueError("Unsupported storage type")

    except Exception as e:
        logger.error(f"Error listing objects: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

2. 支持单个文件 & 整个文件夹 Copy

你可以加一个参数：
	•	copy_type: file 或 folder

然后递归处理：

@app.post("/copy")
async def copy(copy_request: CopyRequest, copy_type: str = "file"):
    logger.info(f"📥 Received copy request: {copy_request.dict()}, type: {copy_type}")
    try:
        if copy_type == "file":
            logger.info("Copying a single file...")
            copy_single_file(copy_request)
        elif copy_type == "folder":
            logger.info("Copying a folder recursively...")
            copy_folder(copy_request)
        else:
            raise ValueError("Unsupported copy_type")

        logger.info("✅ Copy completed successfully.")
        return {"message": "Copy successful."}

    except Exception as e:
        logger.error(f"Error during copy: {e}")
        logger.error(traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

3. 递归 Copy 目录的核心逻辑

def copy_folder(copy_request: CopyRequest):
    if copy_request.source_type == "s3":
        paginator = s3_client.get_paginator('list_objects_v2')
        for page in paginator.paginate(Bucket=copy_request.source_bucket, Prefix=copy_request.source_object):
            for obj in page.get('Contents', []):
                key = obj['Key']
                # 取出目标文件路径
                relative_path = key[len(copy_request.source_object):]
                destination_key = copy_request.destination_object + relative_path

                # 下载 -> 上传
                s3_object = s3_client.get_object(Bucket=copy_request.source_bucket, Key=key)
                data = s3_object['Body'].read()
                minio_client.put_object(copy_request.destination_bucket, destination_key, data, len(data))
                logger.info(f"Copied {key} to {destination_key}")

    elif copy_request.source_type == "minio":
        objects = minio_client.list_objects(copy_request.source_bucket, prefix=copy_request.source_object, recursive=True)
        for obj in objects:
            key = obj.object_name
            relative_path = key[len(copy_request.source_object):]
            destination_key = copy_request.destination_object + relative_path

            response = minio_client.get_object(copy_request.source_bucket, key)
            data = response.read()
            s3_client.put_object(Bucket=copy_request.destination_bucket, Key=destination_key, Body=data)
            logger.info(f"Copied {key} to {destination_key}")

    else:
        raise ValueError("Unsupported source type")

✅ 最后，示例请求

单个文件 copy

POST /copy
{
    "source_type": "s3",
    "source_bucket": "my-source-bucket",
    "source_object": "myfolder/file1.txt",
    "destination_type": "minio",
    "destination_bucket": "my-dest-bucket",
    "destination_object": "backup/file1.txt"
}

文件夹递归 copy

POST /copy?copy_type=folder
{
    "source_type": "s3",
    "source_bucket": "my-source-bucket",
    "source_object": "myfolder/",
    "destination_type": "minio",
    "destination_bucket": "my-dest-bucket",
    "destination_object": "backup/"
}

查看 bucket 和目录内容

GET /list?storage_type=s3

GET /list?storage_type=minio&bucket=mybucket&prefix=myfolder/

🔥 总结你的需求状态

功能	方案	是否完成
Swagger Example	Field + example	✅
列出 Bucket & 目录	/list 接口	✅
单个文件 copy	支持	✅
整个目录递归 copy	自己写递归	✅
支持 Swagger UI	FastAPI 自带	✅

如果你需要，我可以帮你写一份完整的整合版项目代码，打包给你。
要我帮你整理吗？
