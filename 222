import os
import pandas as pd

def generate_command_table(directory_path, legal_entities):
    # 目录中的所有文件夹
    directories = [d for d in os.listdir(directory_path) if os.path.isdir(os.path.join(directory_path, d))]
    # 准备存储结果的列表
    data = []
    
    # 遍历每个目录，提取legal entity和machine name
    for directory in directories:
        for entity in legal_entities:
            if directory.upper().startswith(entity.upper()):
                machine_name = directory[len(entity):]
                command = f"ansible-playbook -i dev/ -l {entity} generate-jil.yml -e machine={machine_name}"
                data.append({"Directory Name": directory, "Command": command})
                break

    # 使用pandas创建DataFrame
    df = pd.DataFrame(data)
    # 保存到CSV文件
    df.to_csv("ansible_commands.csv", index=False)
    return df

# 示例调用
directory_path = "/path/to/directory/with/subfolders"
legal_entities = ["Entity1", "Entity2", "Entity3"]  # 应从文件读取或其他方式获得
df = generate_command_table(directory_path, legal_entities)
print(df)

import pandas as pd
import subprocess

def run_ansible_commands(csv_file):
    # 读取CSV文件
    df = pd.read_csv(csv_file)
    
    # 遍历每行执行命令
    for index, row in df.iterrows():
        print(f"Executing: {row['Command']}")
        # 使用subprocess运行命令
        subprocess.run(row['Command'], shell=True)

# 示例调用
run_ansible_commands("ansible_commands.csv")


import re

# 定义两个正则表达式
regex_a = r'\d'
regex_b = r'[a-zA-Z]'

# 示例字符串
string = "abc123"

# 检查是否匹配两个正则表达式
if re.search(regex_a, string) and re.search(regex_b, string):
    # 如果同时匹配正则表达式 a 和 b
    print("String matches both regex a and regex b")
    # 这里执行匹配时的逻辑
else:
    # 如果不同时匹配正则表达式 a 和 b
    print("String does not match both regex a和 regex b")
    # 这里执行不匹配时的逻辑


import pandas as pd

# 定义Excel文件路径和分隔符
excel_file = 'your_excel_file.xlsx'
separator = '---SEPARATOR---'

# 读取Excel文件中的所有工作表
all_sheets = pd.read_excel(excel_file, sheet_name=None)

# 初始化一个空列表来存储符合条件的DataFrame
dfs = []

# 遍历所有工作表
for sheet_name, df in all_sheets.items():
    # 检查工作表名称是否以'xxx'结尾
    if sheet_name.endswith('xxx'):
        # 在DataFrame前后添加分隔符
        dfs.append(pd.DataFrame([[separator]], columns=[None]))
        dfs.append(df)

# 在最后一个DataFrame后再添加一个分隔符
dfs.append(pd.DataFrame([[separator]], columns=[None]))

# 将所有符合条件的DataFrame合并为一个DataFrame
combined_df = pd.concat(dfs, ignore_index=True)

# 导出到新的Excel文件
combined_df.to_excel('combined_sheets.xlsx', index=False, header=False)

print("Sheets combined and saved to combined_sheets.xlsx")


