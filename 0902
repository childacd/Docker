aws cloudtrail lookup-events \
    --lookup-attributes AttributeKey=EventName,AttributeValue=RunInstances \
    --start-time $(date -u -d '30 days ago' '+%Y-%m-%dT%H:%M:%SZ') \
    --end-time $(date -u '+%Y-%m-%dT%H:%M:%SZ') \
    --query 'Events[*].CloudTrailEvent' \
    --output text | grep Spot

aws ec2 describe-spot-instance-requests \
    --filters "Name=state,Values=active,open,closed" \
    --query 'SpotInstanceRequests[*].[SpotInstanceRequestId,InstanceId,CreateTime]' \
    --output table

aws ec2 describe-instances \
    --filters "Name=instance-lifecycle,Values=spot" \
    --query 'Reservations[*].Instances[*].[InstanceId,LaunchTime]' \
    --output json | jq -r '.[][] | select(.LaunchTime >= "'$(date -u -d '30 days ago' '+%Y-%m-%dT%H:%M:%S')'Z") | .InstanceId'




#!/bin/bash

# 设置时间范围，默认为过去90天
START_TIME=$(date -u -d '90 days ago' '+%Y-%m-%dT%H:%M:%SZ')

# 第一步：获取所有 Spot Instances 的实例 ID 和启动时间
aws ec2 describe-instances \
    --filters "Name=instance-lifecycle,Values=spot" \
    --query 'Reservations[*].Instances[*].[InstanceId,LaunchTime]' \
    --output json > 


use strict;
use warnings;
use File::Slurp; # 用于读取和写入文件

# 预定义的 map
my %tag_map = (
    "valueA1" => { "valueB1" => "valueC1" },
    "valueA2" => { "valueB2" => "valueC2" },
    # 添加更多键值对组合
);

# 读取 Terraform 文件
my $file_path = 'example.tf';
my $terraform_config = read_file($file_path);

# 处理 Terraform 配置，提取 `aws_instance` 资源块
$terraform_config =~ s{
    (resource\s+"aws_instance"\s+"(\w+)"\s*\{(.*?tags\s*=\s*\{.*?\})\})
}{
    my $instance_block = $1;  # 整个实例块
    my $instance_name  = $2;  # 实例名称
    my $tags_block     = $3;  # tags 块内容

    # 提取 A 和 B 标签的值
    my ($tag_a_value) = $tags_block =~ /A\s*=\s*"([^"]+)"/;
    my ($tag_b_value) = $tags_block =~ /B\s*=\s*"([^"]+)"/;

    # 确定 C 标签的值
    my $tag_c_value;
    if (defined $tag_map{$tag_a_value} && defined $tag_map{$tag_a_value}{$tag_b_value}) {
        $tag_c_value = $tag_map{$tag_a_value}{$tag_b_value};
    } else {
        warn "未找到匹配的 C 值: A = $tag_a_value, B = $tag_b_value\n";
        $tag_c_value = 'default_value'; # 如果找不到对应的值，可以使用一个默认值
    }

    # 添加 C 标签到 tags 块
    if ($tags_block =~ /C\s*=\s*"[^"]*"/) {
        # 如果已有 C 标签，则替换其值
        $tags_block =~ s/C\s*=\s*"[^"]*"/C = "$tag_c_value"/;
    } else {
        # 如果没有 C 标签，则添加新行
        $tags_block =~ s/\}/    C = "$tag_c_value"\n    }/;
    }

    # 返回修改后的实例块
    $instance_block =~ s{tags\s*=\s*\{.*?\}}{$tags_block};
    $instance_block;
}egsx;

# 将修改后的内容写回 Terraform 文件
write_file($file_path, $terraform_config);




#!/bin/bash

# 设置时间范围，默认为过去90天
START_TIME=$(date -u -d '90 days ago' '+%Y-%m-%dT%H:%M:%SZ')

# 第一步：获取过去几个月内的 Spot Instance Requests
aws ec2 describe-spot-instance-requests \
    --query 'SpotInstanceRequests[?CreateTime>=`'"$START_TIME"'`]' \
    --output json > spot_requests.json

# 第二步：提取对应的实例 ID
jq -r '.[] | select(.InstanceId != null) | .InstanceId' spot_requests.json > spot_instance_ids.txt

# 第三步：获取这些实例的标签信息
echo "InstanceId | Key | Value" > spot_instance_tags.txt
for id in $(cat spot_instance_ids.txt); do
    aws ec2 describe-tags \
        --filters "Name=resource-id,Values=$id" \
        --query 'Tags[*].[ResourceId,Key,Value]' \
        --output text >> spot_instance_tags.txt
done

# 输出完成信息
echo "Spot Instances tags have been saved to spot_instance_tags.txt"
