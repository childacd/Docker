import argparse
import fastavro
import pyarrow as pa
import pyarrow.parquet as pq
import pandas as pd

def convert_avro_type_to_arrow(field_type):
    """根据字段的 Avro 类型转换为 PyArrow 类型"""
    if isinstance(field_type, dict):  # 复杂类型，如 record
        if field_type.get('type') == 'record':
            # 对于 record 类型，我们递归地处理其内部字段
            return pa.struct([
                pa.field(f['name'], convert_avro_type_to_arrow(f['type']))
                for f in field_type['fields']
            ])
        elif field_type.get('type') == 'array':
            # 对于 array 类型，处理其元素类型
            item_type = field_type.get('items')
            return pa.list_(convert_avro_type_to_arrow(item_type))
    elif isinstance(field_type, list):  # 联合类型 (union)
        return pa.union([convert_avro_type_to_arrow(t) for t in field_type])
    elif isinstance(field_type, str):  # 基本类型
        if field_type == 'string':
            return pa.string()
        elif field_type == 'int':
            return pa.int64()
        elif field_type == 'float':
            return pa.float32()
        elif field_type == 'double':
            return pa.float64()
        elif field_type == 'boolean':
            return pa.bool_()
        else:
            return pa.string()  # 默认转换为字符串
    else:
        return pa.string()  # 默认转换为字符串

def avro_to_parquet(avro_file_path, parquet_file_path):
    with open(avro_file_path, 'rb') as avro_file:
        reader = fastavro.reader(avro_file)
        schema = reader.schema

        # Print out the field types in the Avro schema
        print("Avro Schema Fields and Types:")
        for field in schema['fields']:
            field_name = field['name']
            field_type = field['type']
            print(f"Field name: {field_name}, Field type: {field_type}")

        # Convert schema into Arrow schema dynamically
        arrow_schema = pa.schema([
            pa.field(field['name'], convert_avro_type_to_arrow(field['type']))
            for field in schema['fields']
        ])

        # Read records and convert them to pandas DataFrame
        records = [record for record in reader]
        df = pd.DataFrame(records)

        # Clean the data: fill NaN values and convert types
        df = df.fillna('')  # You can change the default value if needed
        df = df.convert_dtypes()  # Automatically converts data types to compatible types

        # Convert pandas DataFrame to pyarrow Table
        arrow_table = pa.Table.from_pandas(df, schema=arrow_schema)

        # Write the Arrow Table to Parquet
        pq.write_table(arrow_table, parquet_file_path)

    print(f"Avro file {avro_file_path} has been successfully converted to Parquet at {parquet_file_path}")

def main():
    parser = argparse.ArgumentParser(description="Convert Avro to Parquet")
    parser.add_argument("avro_file", help="Input Avro file path")
    parser.add_argument("parquet_file", help="Output Parquet file path")
    args = parser.parse_args()

    avro_to_parquet(args.avro_file, args.parquet_file)

if __name__ == "__main__":
    main()
