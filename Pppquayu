你可以创建 多对多 和 一对多 的环境与队列配置。以下是更新的配置方法，同时所有资源名字都带有 Kim-test，并提供删除命令方便清理。

多对多场景

多个队列可以绑定多个计算环境，从而实现任务动态分配到不同的计算环境。

示例设计

	•	2 个计算环境 Kim-test-env-1 和 Kim-test-env-2。
	•	2 个队列 Kim-test-queue-1 和 Kim-test-queue-2。
	•	队列绑定多个计算环境，优先级按顺序指定。

创建资源

	1.	创建计算环境

aws batch create-compute-environment \
    --compute-environment-name "Kim-test-env-1" \
    --type MANAGED \
    --state ENABLED \
    --compute-resources '{"type":"EC2","minvCpus":0,"maxvCpus":2,"desiredvCpus":1,"instanceTypes":["t3.micro"],"subnets":["<your-subnet-id>"],"securityGroupIds":["<your-security-group-id>"],"instanceRole":"ecsInstanceRole"}'

aws batch create-compute-environment \
    --compute-environment-name "Kim-test-env-2" \
    --type MANAGED \
    --state ENABLED \
    --compute-resources '{"type":"EC2","minvCpus":0,"maxvCpus":2,"desiredvCpus":1,"instanceTypes":["t3.micro"],"subnets":["<your-subnet-id>"],"securityGroupIds":["<your-security-group-id>"],"instanceRole":"ecsInstanceRole"}'

	2.	创建队列
绑定队列到多个计算环境（多对多场景）：

aws batch create-job-queue \
    --job-queue-name "Kim-test-queue-1" \
    --state ENABLED \
    --priority 1 \
    --compute-environment-order computeEnvironment="Kim-test-env-1",order=1 computeEnvironment="Kim-test-env-2",order=2

aws batch create-job-queue \
    --job-queue-name "Kim-test-queue-2" \
    --state ENABLED \
    --priority 2 \
    --compute-environment-order computeEnvironment="Kim-test-env-2",order=1 computeEnvironment="Kim-test-env-1",order=2

	3.	创建作业定义

aws batch register-job-definition \
    --job-definition-name "Kim-test-job" \
    --type "container" \
    --container-properties '{"image":"amazonlinux","vcpus":1,"memory":128,"command":["/bin/bash","-c","sleep 30"]}'

	4.	提交任务
提交任务到不同队列，观察任务如何分配到不同的计算环境：

aws batch submit-job \
    --job-name "Kim-test-job-1" \
    --job-queue "Kim-test-queue-1" \
    --job-definition "Kim-test-job"

aws batch submit-job \
    --job-name "Kim-test-job-2" \
    --job-queue "Kim-test-queue-2" \
    --job-definition "Kim-test-job"

一对多场景

一个计算环境可以绑定到多个队列，从而实现任务由不同优先级队列分发到同一个计算环境。

示例设计

	•	1 个计算环境 Kim-test-env。
	•	2 个队列 Kim-test-queue-1 和 Kim-test-queue-2，优先级不同。

	1.	创建计算环境

aws batch create-compute-environment \
    --compute-environment-name "Kim-test-env" \
    --type MANAGED \
    --state ENABLED \
    --compute-resources '{"type":"EC2","minvCpus":0,"maxvCpus":2,"desiredvCpus":1,"instanceTypes":["t3.micro"],"subnets":["<your-subnet-id>"],"securityGroupIds":["<your-security-group-id>"],"instanceRole":"ecsInstanceRole"}'

	2.	创建队列
绑定到同一个计算环境：

aws batch create-job-queue \
    --job-queue-name "Kim-test-queue-1" \
    --state ENABLED \
    --priority 1 \
    --compute-environment-order computeEnvironment="Kim-test-env",order=1

aws batch create-job-queue \
    --job-queue-name "Kim-test-queue-2" \
    --state ENABLED \
    --priority 2 \
    --compute-environment-order computeEnvironment="Kim-test-env",order=1

	3.	提交任务

aws batch submit-job \
    --job-name "Kim-test-job-1" \
    --job-queue "Kim-test-queue-1" \
    --job-definition "Kim-test-job"

aws batch submit-job \
    --job-name "Kim-test-job-2" \
    --job-queue "Kim-test-queue-2" \
    --job-definition "Kim-test-job"

清理资源

以下命令可以按顺序删除资源：

删除作业

aws batch list-jobs --job-queue "Kim-test-queue-1" --job-status SUBMITTED | jq -r '.jobSummaryList[].jobId' | xargs -n1 aws batch cancel-job --job-id {} --reason "Cleanup"
aws batch list-jobs --job-queue "Kim-test-queue-2" --job-status SUBMITTED | jq -r '.jobSummaryList[].jobId' | xargs -n1 aws batch cancel-job --job-id {} --reason "Cleanup"

删除队列

aws batch delete-job-queue --job-queue "Kim-test-queue-1"
aws batch delete-job-queue --job-queue "Kim-test-queue-2"

删除计算环境

aws batch delete-compute-environment --compute-environment-name "Kim-test-env-1"
aws batch delete-compute-environment --compute-environment-name "Kim-test-env-2"
aws batch delete-compute-environment --compute-environment-name "Kim-test-env"

删除作业定义

aws batch deregister-job-definition --job-definition "Kim-test-job"

总结

	•	多对多：多个队列绑定到多个计算环境。
	•	一对多：一个计算环境绑定到多个队列。
	•	命名规则：所有资源名字包含 Kim-test。
	•	清理命令：确保测试结束后资源被清理，避免额外成本。
